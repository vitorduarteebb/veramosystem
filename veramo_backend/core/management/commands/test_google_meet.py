from django.core.management.base import BaseCommand
from django.conf import settings
from django.utils import timezone
from datetime import datetime, timedelta
import logging

# Importar o servi√ßo no escopo do m√≥dulo para ser vis√≠vel em todos os m√©todos
try:
    from core.services.google_meet_service import GoogleMeetService
except Exception as _e:
    GoogleMeetService = None

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Testa a integra√ß√£o com o Google Meet'

    def add_arguments(self, parser):
        parser.add_argument(
            '--create-meeting',
            action='store_true',
            help='Cria uma reuni√£o de teste no Google Meet',
        )
        parser.add_argument(
            '--list-meetings',
            action='store_true',
            help='Lista reuni√µes existentes no Google Calendar',
        )
        parser.add_argument(
            '--check-config',
            action='store_true',
            help='Verifica a configura√ß√£o do Google Meet',
        )

    def handle(self, *args, **options):
        try:
            if GoogleMeetService is None:
                raise ImportError('Servi√ßo do Google Meet indispon√≠vel')
            self.stdout.write(self.style.SUCCESS('‚úì Servi√ßo do Google Meet importado com sucesso'))
            
            # Verificar configura√ß√£o
            if options['check_config']:
                self.check_configuration()
            
            # Criar reuni√£o de teste
            if options['create_meeting']:
                self.create_test_meeting()
            
            # Listar reuni√µes
            if options['list_meetings']:
                self.list_meetings()
            
            # Se nenhuma op√ß√£o foi especificada, executar verifica√ß√£o b√°sica
            if not any([options['create_meeting'], options['list_meetings'], options['check_config']]):
                self.stdout.write(
                    self.style.WARNING('Nenhuma op√ß√£o especificada. Executando verifica√ß√£o b√°sica...')
                )
                self.check_configuration()
                
        except ImportError as e:
            self.stdout.write(
                self.style.ERROR(f'‚úó Erro ao importar servi√ßo do Google Meet: {e}')
            )
            self.stdout.write(
                self.style.WARNING('Verifique se as depend√™ncias est√£o instaladas: pip install google-auth google-api-python-client')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚úó Erro inesperado: {e}')
            )

    def check_configuration(self):
        """Verifica a configura√ß√£o do Google Meet"""
        self.stdout.write('\nüîç Verificando configura√ß√£o do Google Meet...')
        
        # Verificar vari√°veis de ambiente
        required_vars = [
            'GOOGLE_CREDENTIALS_FILE',
            'GOOGLE_SERVICE_ACCOUNT_INFO',
            'GOOGLE_CLOUD_PROJECT_ID',
        ]
        
        config_ok = False
        for var in required_vars:
            value = getattr(settings, var, None)
            if value:
                self.stdout.write(f'‚úì {var}: Configurado')
                config_ok = True
            else:
                self.stdout.write(f'‚úó {var}: N√£o configurado')
        
        if not config_ok:
            self.stdout.write(
                self.style.WARNING(
                    '\n‚ö†Ô∏è  Nenhuma configura√ß√£o de credenciais encontrada!\n'
                    'Configure pelo menos uma das seguintes op√ß√µes:\n'
                    '1. GOOGLE_CREDENTIALS_FILE: Caminho para arquivo JSON\n'
                    '2. GOOGLE_SERVICE_ACCOUNT_INFO: JSON das credenciais\n'
                    '3. GOOGLE_CLOUD_PROJECT_ID: ID do projeto no Google Cloud\n\n'
                    'Veja o arquivo env.google_meet.example para mais detalhes.'
                )
            )
            return False
        
        # Tentar autenticar
        try:
            if GoogleMeetService is None:
                raise RuntimeError('Servi√ßo do Google Meet indispon√≠vel')
            meet_service = GoogleMeetService()
            self.stdout.write('‚úì Autentica√ß√£o com Google API bem-sucedida')
            return True
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚úó Falha na autentica√ß√£o: {e}')
            )
            return False

    def create_test_meeting(self):
        """Cria uma reuni√£o de teste no Google Meet"""
        self.stdout.write('\nüìÖ Criando reuni√£o de teste no Google Meet...')
        
        try:
            if GoogleMeetService is None:
                raise RuntimeError('Servi√ßo do Google Meet indispon√≠vel')
            meet_service = GoogleMeetService()
            
            # Criar hor√°rios para a reuni√£o de teste
            now = timezone.now()
            start_time = now + timedelta(hours=1)
            end_time = start_time + timedelta(hours=1)
            
            # Criar reuni√£o
            meeting_info = meet_service.create_meeting(
                summary="Reuni√£o de Teste - Veramo3",
                description="Esta √© uma reuni√£o de teste para verificar a integra√ß√£o com o Google Meet",
                start_time=start_time,
                end_time=end_time,
                attendees=[],
                location="Google Meet"
            )
            
            if meeting_info:
                self.stdout.write(
                    self.style.SUCCESS('‚úì Reuni√£o de teste criada com sucesso!')
                )
                self.stdout.write(f'  üìç Link do Meet: {meeting_info["meet_link"]}')
                self.stdout.write(f'  üìÖ Link do Calendar: {meeting_info["html_link"]}')
                self.stdout.write(f'  üÜî ID do Evento: {meeting_info["event_id"]}')
                
                # Perguntar se deve remover a reuni√£o de teste
                remove = input('\n‚ùì Deseja remover esta reuni√£o de teste? (s/N): ')
                if remove.lower() in ['s', 'sim', 'y', 'yes']:
                    if meet_service.delete_meeting(meeting_info['event_id']):
                        self.stdout.write(
                            self.style.SUCCESS('‚úì Reuni√£o de teste removida com sucesso')
                        )
                    else:
                        self.stdout.write(
                            self.style.ERROR('‚úó Erro ao remover reuni√£o de teste')
                        )
            else:
                self.stdout.write(
                    self.style.ERROR('‚úó Falha ao criar reuni√£o de teste')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚úó Erro ao criar reuni√£o de teste: {e}')
            )

    def list_meetings(self):
        """Lista reuni√µes existentes no Google Calendar"""
        self.stdout.write('\nüìã Listando reuni√µes existentes...')
        
        try:
            meet_service = GoogleMeetService()
            
            # Buscar eventos futuros
            now = timezone.now()
            start_time = now.isoformat() + 'Z'
            
            # Usar o servi√ßo para buscar eventos
            service = meet_service.service
            events_result = service.events().list(
                calendarId='primary',
                timeMin=start_time,
                maxResults=10,
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            
            if not events:
                self.stdout.write('  üì≠ Nenhuma reuni√£o futura encontrada')
                return
            
            self.stdout.write(f'  üìÖ Encontradas {len(events)} reuni√µes futuras:\n')
            
            for event in events:
                start = event['start'].get('dateTime', event['start'].get('date'))
                meet_link = event.get('hangoutLink', 'N/A')
                
                self.stdout.write(f'  üìå {event["summary"]}')
                self.stdout.write(f'     üïê {start}')
                self.stdout.write(f'     üîó {meet_link}')
                self.stdout.write('')
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚úó Erro ao listar reuni√µes: {e}')
            )
