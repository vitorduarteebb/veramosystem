#!/usr/bin/env python3
"""
Script de configura√ß√£o autom√°tica para integra√ß√£o com Google Meet
"""

import os
import sys
import json
import subprocess
from pathlib import Path

def print_header():
    """Imprime cabe√ßalho do script"""
    print("=" * 60)
    print("üîß CONFIGURA√á√ÉO AUTOM√ÅTICA - GOOGLE MEET INTEGRATION")
    print("=" * 60)
    print()

def check_python_version():
    """Verifica a vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")

def check_django_project():
    """Verifica se estamos em um projeto Django"""
    if not os.path.exists('manage.py'):
        print("‚ùå Arquivo manage.py n√£o encontrado. Execute este script na raiz do projeto Django.")
        sys.exit(1)
    print("‚úÖ Projeto Django detectado")

def install_dependencies():
    """Instala as depend√™ncias necess√°rias"""
    print("\nüì¶ Instalando depend√™ncias do Google Meet...")
    
    dependencies = [
        'google-auth>=2.23.0',
        'google-auth-oauthlib>=1.1.0',
        'google-auth-httplib2>=0.1.1',
        'google-api-python-client>=2.100.0',
        'google-cloud-pubsub>=2.18.0'
    ]
    
    for dep in dependencies:
        try:
            print(f"  Instalando {dep}...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', dep], 
                         check=True, capture_output=True)
            print(f"  ‚úÖ {dep} instalado")
        except subprocess.CalledProcessError as e:
            print(f"  ‚ùå Erro ao instalar {dep}: {e}")
            return False
    
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = [
        'core/services',
        'core/management/commands',
        'core/settings'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ Diret√≥rio {directory} criado/verificado")

def create_init_files():
    """Cria arquivos __init__.py necess√°rios"""
    print("\nüìÑ Criando arquivos __init__.py...")
    
    init_files = [
        'core/services/__init__.py',
        'core/management/__init__.py',
        'core/management/commands/__init__.py',
        'core/settings/__init__.py'
    ]
    
    for init_file in init_files:
        Path(init_file).touch(exist_ok=True)
        print(f"  ‚úÖ {init_file} criado/verificado")

def check_existing_files():
    """Verifica se os arquivos j√° existem"""
    print("\nüîç Verificando arquivos existentes...")
    
    files_to_check = [
        'core/services/google_meet_service.py',
        'core/settings/google_meet.py',
        'core/management/commands/test_google_meet.py',
        'env.google_meet.example',
        'README_GOOGLE_MEET.md'
    ]
    
    existing_files = []
    for file_path in files_to_check:
        if os.path.exists(file_path):
            existing_files.append(file_path)
            print(f"  ‚ö†Ô∏è  {file_path} j√° existe")
        else:
            print(f"  ‚úÖ {file_path} n√£o existe (ser√° criado)")
    
    if existing_files:
        print(f"\n‚ö†Ô∏è  {len(existing_files)} arquivo(s) j√° existem")
        overwrite = input("Deseja sobrescrever? (s/N): ").lower()
        if overwrite not in ['s', 'sim', 'y', 'yes']:
            print("‚ùå Configura√ß√£o cancelada")
            sys.exit(0)

def run_migrations():
    """Executa as migra√ß√µes do Django"""
    print("\nüîÑ Executando migra√ß√µes...")
    
    try:
        # Verificar se h√° migra√ß√µes pendentes
        result = subprocess.run([sys.executable, 'manage.py', 'makemigrations'], 
                              capture_output=True, text=True)
        
        if "No changes detected" in result.stdout:
            print("  ‚úÖ Nenhuma migra√ß√£o pendente")
        else:
            print("  üìù Migra√ß√µes criadas")
            
            # Executar migra√ß√µes
            subprocess.run([sys.executable, 'manage.py', 'migrate'], check=True)
            print("  ‚úÖ Migra√ß√µes aplicadas")
            
    except subprocess.CalledProcessError as e:
        print(f"  ‚ùå Erro ao executar migra√ß√µes: {e}")
        return False
    
    return True

def create_env_file():
    """Cria arquivo .env com configura√ß√µes b√°sicas"""
    print("\nüîê Criando arquivo .env...")
    
    env_content = """# Configura√ß√µes do Google Meet
# Copie este arquivo para .env e preencha com suas credenciais

# Op√ß√£o 1: Arquivo de credenciais JSON
GOOGLE_CREDENTIALS_FILE=/path/to/your/service-account-key.json

# Op√ß√£o 2: Credenciais em vari√°vel de ambiente
# GOOGLE_SERVICE_ACCOUNT_INFO={"type":"service_account","project_id":"...","private_key_id":"...","private_key":"...","client_email":"...","client_id":"...","auth_uri":"...","token_uri":"...","auth_provider_x509_cert_url":"...","client_x509_cert_url":"..."}

# ID do projeto no Google Cloud
GOOGLE_CLOUD_PROJECT_ID=your-project-id

# Email da conta de servi√ßo
GOOGLE_SERVICE_ACCOUNT_EMAIL=your-service-account@your-project.iam.gserviceaccount.com

# Fuso hor√°rio padr√£o
GOOGLE_MEET_TIMEZONE=America/Sao_Paulo

# Dura√ß√£o padr√£o da reuni√£o em minutos
GOOGLE_MEET_DEFAULT_DURATION=60
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("  ‚úÖ Arquivo .env criado")
    print("  üìù Edite o arquivo .env com suas credenciais")

def test_configuration():
    """Testa a configura√ß√£o b√°sica"""
    print("\nüß™ Testando configura√ß√£o...")
    
    try:
        # Testar importa√ß√£o do servi√ßo
        result = subprocess.run([sys.executable, 'manage.py', 'test_google_meet', '--check-config'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("  ‚úÖ Configura√ß√£o b√°sica OK")
        else:
            print("  ‚ö†Ô∏è  Configura√ß√£o b√°sica com problemas")
            print("  üìù Execute 'python manage.py test_google_meet --check-config' para mais detalhes")
            
    except Exception as e:
        print(f"  ‚ùå Erro ao testar configura√ß√£o: {e}")

def print_next_steps():
    """Imprime pr√≥ximos passos"""
    print("\n" + "=" * 60)
    print("üéâ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print()
    print("üìã PR√ìXIMOS PASSOS:")
    print()
    print("1. üîë Configure suas credenciais do Google:")
    print("   - Acesse: https://console.cloud.google.com/")
    print("   - Crie um projeto e habilite as APIs necess√°rias")
    print("   - Crie uma conta de servi√ßo com permiss√µes adequadas")
    print("   - Baixe o arquivo de credenciais JSON")
    print()
    print("2. ‚öôÔ∏è  Configure as vari√°veis de ambiente:")
    print("   - Edite o arquivo .env com suas credenciais")
    print("   - Ou configure as vari√°veis no seu sistema")
    print()
    print("3. üß™ Teste a configura√ß√£o:")
    print("   python manage.py test_google_meet --check-config")
    print()
    print("4. üìö Consulte a documenta√ß√£o:")
    print("   README_GOOGLE_MEET.md")
    print()
    print("5. üöÄ Crie uma reuni√£o de teste:")
    print("   python manage.py test_google_meet --create-meeting")
    print()
    print("üîó LINKS √öTEIS:")
    print("   - Google Cloud Console: https://console.cloud.google.com/")
    print("   - Google Calendar API: https://developers.google.com/calendar")
    print("   - Google Meet API: https://developers.google.com/meet")
    print()
    print("üìû Para suporte, consulte o README_GOOGLE_MEET.md")

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verifica√ß√µes iniciais
    check_python_version()
    check_django_project()
    
    # Instala√ß√£o e configura√ß√£o
    if not install_dependencies():
        print("‚ùå Falha na instala√ß√£o das depend√™ncias")
        sys.exit(1)
    
    create_directories()
    create_init_files()
    check_existing_files()
    
    if not run_migrations():
        print("‚ùå Falha ao executar migra√ß√µes")
        sys.exit(1)
    
    create_env_file()
    test_configuration()
    
    print_next_steps()

if __name__ == "__main__":
    main()
