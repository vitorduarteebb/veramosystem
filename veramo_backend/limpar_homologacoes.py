#!/usr/bin/env python
"""
Script para limpar todas as homologa√ß√µes do sistema
Este script remove todos os dados relacionados aos processos de homologa√ß√£o
"""

import os
import sys
import django
from django.conf import settings

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'veramo_backend.settings.dev')
django.setup()

from core.models import DemissaoProcess, Document, Schedule, SystemLog
from django.core.files.storage import default_storage
import shutil

def limpar_homologacoes():
    """Limpa todas as homologa√ß√µes do sistema"""
    
    print("üßπ Iniciando limpeza das homologa√ß√µes...")
    
    # Contadores para relat√≥rio
    contadores = {
        'processos': 0,
        'documentos': 0,
        'agendamentos': 0,
        'logs': 0,
        'arquivos': 0
    }
    
    try:
        # 1. Limpar documentos (primeiro para evitar problemas de foreign key)
        print("üìÑ Removendo documentos...")
        documentos = Document.objects.all()
        for doc in documentos:
            # Remover arquivo f√≠sico se existir
            if doc.file and default_storage.exists(doc.file.name):
                default_storage.delete(doc.file.name)
                contadores['arquivos'] += 1
            contadores['documentos'] += 1
        
        Document.objects.all().delete()
        print(f"   ‚úÖ {contadores['documentos']} documentos removidos")
        
        # 2. Limpar processos de demiss√£o
        print("üìã Removendo processos de demiss√£o...")
        processos = DemissaoProcess.objects.all()
        for processo in processos:
            # Remover arquivos de assinatura se existirem
            if processo.documento_assinado_empresa and default_storage.exists(processo.documento_assinado_empresa.name):
                default_storage.delete(processo.documento_assinado_empresa.name)
                contadores['arquivos'] += 1
            if processo.documento_assinado_sindicato and default_storage.exists(processo.documento_assinado_sindicato.name):
                default_storage.delete(processo.documento_assinado_sindicato.name)
                contadores['arquivos'] += 1
            if processo.documento_assinado_trabalhador and default_storage.exists(processo.documento_assinado_trabalhador.name):
                default_storage.delete(processo.documento_assinado_trabalhador.name)
                contadores['arquivos'] += 1
            contadores['processos'] += 1
        
        DemissaoProcess.objects.all().delete()
        print(f"   ‚úÖ {contadores['processos']} processos removidos")
        
        # 3. Limpar agendamentos
        print("üìÖ Removendo agendamentos...")
        agendamentos = Schedule.objects.all()
        contadores['agendamentos'] = agendamentos.count()
        Schedule.objects.all().delete()
        print(f"   ‚úÖ {contadores['agendamentos']} agendamentos removidos")
        
        # 4. Limpar logs relacionados √†s homologa√ß√µes
        print("üìù Removendo logs relacionados √†s homologa√ß√µes...")
        logs_homologacao = SystemLog.objects.filter(
            action__in=[
                'DOCUMENT_UPLOADED',
                'DOCUMENT_APPROVED', 
                'DOCUMENT_REJECTED',
                'HOMOLOGATION_COMPLETED',
                'SCHEDULE_CREATED',
                'SCHEDULE_UPDATED',
                'SCHEDULE_DELETED'
            ]
        )
        contadores['logs'] = logs_homologacao.count()
        logs_homologacao.delete()
        print(f"   ‚úÖ {contadores['logs']} logs removidos")
        
        # 5. Limpar diret√≥rios de arquivos relacionados
        print("üóÇÔ∏è Limpando diret√≥rios de arquivos...")
        try:
            # Limpar diret√≥rio de documentos
            if os.path.exists('media/documents/'):
                shutil.rmtree('media/documents/')
                print("   ‚úÖ Diret√≥rio 'media/documents/' removido")
            
            # Limpar diret√≥rio de assinaturas
            if os.path.exists('media/assinaturas/'):
                shutil.rmtree('media/assinaturas/')
                print("   ‚úÖ Diret√≥rio 'media/assinaturas/' removido")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao limpar diret√≥rios: {e}")
        
        # Relat√≥rio final
        print("\n" + "="*50)
        print("üìä RELAT√ìRIO DE LIMPEZA")
        print("="*50)
        print(f"üìã Processos de demiss√£o: {contadores['processos']}")
        print(f"üìÑ Documentos: {contadores['documentos']}")
        print(f"üìÖ Agendamentos: {contadores['agendamentos']}")
        print(f"üìù Logs: {contadores['logs']}")
        print(f"üóÇÔ∏è Arquivos f√≠sicos: {contadores['arquivos']}")
        print("="*50)
        print("‚úÖ Limpeza conclu√≠da com sucesso!")
        print("üéØ Sistema pronto para testar distribui√ß√£o")
        
    except Exception as e:
        print(f"‚ùå Erro durante a limpeza: {e}")
        return False
    
    return True

def confirmar_limpeza():
    """Solicita confirma√ß√£o do usu√°rio antes de executar a limpeza"""
    print("‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover TODAS as homologa√ß√µes do sistema!")
    print("üìã Ser√£o removidos:")
    print("   ‚Ä¢ Todos os processos de demiss√£o")
    print("   ‚Ä¢ Todos os documentos enviados")
    print("   ‚Ä¢ Todos os agendamentos")
    print("   ‚Ä¢ Logs relacionados √†s homologa√ß√µes")
    print("   ‚Ä¢ Arquivos f√≠sicos (PDFs, assinaturas)")
    print()
    
    resposta = input("ü§î Tem certeza que deseja continuar? (digite 'SIM' para confirmar): ")
    
    if resposta.upper() == 'SIM':
        return True
    else:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return False

if __name__ == '__main__':
    print("üßπ Script de Limpeza de Homologa√ß√µes")
    print("="*40)
    
    if confirmar_limpeza():
        sucesso = limpar_homologacoes()
        if sucesso:
            print("\nüéâ Sistema limpo e pronto para novos testes!")
        else:
            print("\nüí• Falha na limpeza. Verifique os logs acima.")
            sys.exit(1)
    else:
        sys.exit(0)
